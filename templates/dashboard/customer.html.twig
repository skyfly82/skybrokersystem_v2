{% extends "dashboard/base.html.twig" %}

{% block title %}Panel Klienta - Sky Broker System{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js" rel="stylesheet">
{% endblock %}

{% block page_title %}
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">
                {% if is_system_user %}
                    Widok klienta (system user)
                {% else %}
                    Pulpit
                {% endif %}
            </h1>
            <p class="mt-1 text-sm text-gray-600">
                {% if is_system_user %}
                    Zarządzanie z perspektywy użytkownika systemu
                {% else %}
                    Zarządzaj zamówieniami i przeglądaj aktywność
                {% endif %}
            </p>
        </div>
        <div x-data="dashboardStats()" x-init="fetchStats()">
            <div class="text-right">
                <span class="text-sm text-gray-500">Stan konta</span>
                <p class="text-lg font-bold text-blue-600" x-text="formatCurrency(accountBalance)">
                    0,00 PLN
                </p>
            </div>
        </div>
    </div>
{% endblock %}

{% block content %}
    <div x-data="dashboardStats()" x-init="fetchStats()">
        {# Statistics Cards #}
        <div class="grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-4 gap-6 mb-8">
            <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow hover:shadow-md transition-all">
                <div class="flex items-center">
                    <div class="p-2 bg-blue-50 rounded-lg">
                        <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"/>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Zamówienia</p>
                        <p class="text-2xl font-bold text-gray-900" x-text="totalOrders">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow hover:shadow-md transition-all">
                <div class="flex items-center">
                    <div class="p-2 bg-yellow-50 rounded-lg">
                        <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"/>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">W tranzycie</p>
                        <p class="text-2xl font-bold text-gray-900" x-text="ordersInTransit">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow hover:shadow-md transition-all">
                <div class="flex items-center">
                    <div class="p-2 bg-green-50 rounded-lg">
                        <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Faktury</p>
                        <p class="text-2xl font-bold text-gray-900" x-text="totalInvoices">0</p>
                    </div>
                </div>
            </div>

            <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow hover:shadow-md transition-all">
                <div class="flex items-center">
                    <div class="p-2 bg-purple-50 rounded-lg">
                        <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"/>
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-500">Wydane</p>
                        <p class="text-2xl font-bold text-gray-900" x-text="formatCurrency(totalSpent)">0,00 PLN</p>
                    </div>
                </div>
            </div>
        </div>

        {# Charts Row #}
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            {# Monthly Activity Chart #}
            <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow">
                <h3 class="text-lg font-bold text-gray-900 mb-4">Aktywność miesięczna</h3>
                <canvas id="monthlyActivityChart"></canvas>
            </div>

            {# Order Status Distribution #}
            <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow">
                <h3 class="text-lg font-bold text-gray-900 mb-4">Status zamówień</h3>
                <canvas id="orderStatusChart"></canvas>
            </div>
        </div>

        {# Recent Orders #}
        <div class="bg-white border border-gray-200 rounded-xl p-6 card-shadow">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-gray-900">Ostatnie zamówienia</h3>
                <a href="{{ path('app_dashboard', {'type': 'customer', 'section': 'orders'}) }}"
                   class="text-blue-600 text-sm font-medium hover:text-blue-700">
                    Zobacz wszystkie
                </a>
            </div>

            <div class="overflow-x-auto">
                <table class="w-full" x-data="recentOrdersTable()" x-init="fetchRecentOrders()">
                    <thead>
                        <tr class="border-b border-gray-200 bg-gray-50">
                            <th class="text-left py-3 px-4 text-sm font-bold text-gray-900">Nr</th>
                            <th class="text-left py-3 px-4 text-sm font-bold text-gray-900">Status</th>
                            <th class="text-left py-3 px-4 text-sm font-bold text-gray-900">Kwota</th>
                            <th class="text-left py-3 px-4 text-sm font-bold text-gray-900">Data</th>
                            <th class="text-left py-3 px-4 text-sm font-bold text-gray-900">Akcje</th>
                        </tr>
                    </thead>
                    <tbody>
                        <template x-for="order in recentOrders" :key="order.id">
                            <tr class="border-b border-gray-200 hover:bg-gray-50">
                                <td class="py-3 px-4 text-sm font-medium text-gray-900" x-text="order.orderNumber"></td>
                                <td class="py-3 px-4">
                                    <span x-text="order.status"
                                          x-bind:class="{
                                              'bg-yellow-100 text-yellow-800': order.status === 'processing',
                                              'bg-blue-100 text-blue-800': order.status === 'shipped',
                                              'bg-green-100 text-green-800': order.status === 'delivered',
                                              'bg-red-100 text-red-800': order.status === 'cancelled'
                                          }"
                                          class="px-2 py-1 text-xs font-medium rounded-full">
                                    </span>
                                </td>
                                <td class="py-3 px-4 text-sm text-gray-600" x-text="formatCurrency(order.total)"></td>
                                <td class="py-3 px-4 text-sm text-gray-600" x-text="order.date"></td>
                                <td class="py-3 px-4">
                                    <button class="text-blue-600 hover:text-blue-800 text-sm font-medium mr-3">
                                        Zobacz
                                    </button>
                                    <button class="text-gray-600 hover:text-gray-800 text-sm font-medium">
                                        Śledź
                                    </button>
                                </td>
                            </tr>
                        </template>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <script>
        function dashboardStats() {
            return {
                totalOrders: 0,
                ordersInTransit: 0,
                totalInvoices: 0,
                totalSpent: 0,
                accountBalance: 0,

                formatCurrency(value) {
                    return new Intl.NumberFormat('pl-PL', {
                        style: 'currency',
                        currency: 'PLN'
                    }).format(value);
                },

                async fetchStats() {
                    try {
                        const response = await fetch('/api/dashboard/stats');
                        const data = await response.json();

                        this.totalOrders = data.totalOrders;
                        this.ordersInTransit = data.ordersInTransit;
                        this.totalInvoices = data.totalInvoices;
                        this.totalSpent = data.totalSpent;
                        this.accountBalance = data.accountBalance;

                        this.renderCharts(data.monthlyActivity, data.orderStatusDistribution);
                    } catch (error) {
                        console.error('Failed to fetch dashboard stats:', error);
                    }
                },

                renderCharts(monthlyActivity, orderStatusDistribution) {
                    // Monthly Activity Chart
                    new Chart(document.getElementById('monthlyActivityChart'), {
                        type: 'bar',
                        data: {
                            labels: monthlyActivity.labels,
                            datasets: [{
                                label: 'Zamówienia',
                                data: monthlyActivity.data,
                                backgroundColor: 'rgba(59, 130, 246, 0.6)',
                                borderColor: 'rgba(59, 130, 246, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });

                    // Order Status Distribution Chart
                    new Chart(document.getElementById('orderStatusChart'), {
                        type: 'pie',
                        data: {
                            labels: orderStatusDistribution.labels,
                            datasets: [{
                                data: orderStatusDistribution.data,
                                backgroundColor: [
                                    'rgba(59, 130, 246, 0.6)',   // Blue
                                    'rgba(34, 197, 94, 0.6)',    // Green
                                    'rgba(245, 158, 11, 0.6)',   // Yellow
                                    'rgba(239, 68, 68, 0.6)'     // Red
                                ]
                            }]
                        },
                        options: {
                            responsive: true
                        }
                    });
                }
            };
        }

        function recentOrdersTable() {
            return {
                recentOrders: [],

                formatCurrency(value) {
                    return new Intl.NumberFormat('pl-PL', {
                        style: 'currency',
                        currency: 'PLN'
                    }).format(value);
                },

                async fetchRecentOrders() {
                    try {
                        const response = await fetch('/api/dashboard/recent-orders');
                        this.recentOrders = await response.json();
                    } catch (error) {
                        console.error('Failed to fetch recent orders:', error);
                    }
                }
            };
        }
    </script>
{% endblock %}