<!DOCTYPE html>
<html lang="pl" class="h-full bg-gray-50">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sky Broker System{% endblock %}</title>
    {{ importmap() }}
    <meta name="csrf-token" content="{{ csrf_token('dashboard') }}">
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}">
</head>
<body class="h-full">
    <div id="dashboard-app" class="h-full">
        <!-- Off-canvas menu for mobile -->
        <div x-data="{ sidebarOpen: false }" class="relative z-50 lg:hidden" x-show="sidebarOpen" style="display: none;">
            <div class="fixed inset-0 bg-gray-900/80" x-transition:enter="transition-opacity ease-linear duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition-opacity ease-linear duration-300" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"></div>

            <div class="fixed inset-0 flex">
                <div class="relative mr-16 flex w-full max-w-xs flex-1" x-transition:enter="transition ease-in-out duration-300 transform" x-transition:enter-start="-translate-x-full" x-transition:enter-end="translate-x-0" x-transition:leave="transition ease-in-out duration-300 transform" x-transition:leave-start="translate-x-0" x-transition:leave-end="-translate-x-full">
                    <div class="absolute left-full top-0 flex w-16 justify-center pt-5">
                        <button type="button" class="-m-2.5 p-2.5" @click="sidebarOpen = false">
                            <span class="sr-only">Close sidebar</span>
                            <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>

                    {% block mobile_sidebar %}
                        {{ include('components/sidebar.html.twig', { mobile: true }) }}
                    {% endblock %}
                </div>
            </div>
        </div>

        <!-- Static sidebar for desktop -->
        <div class="hidden lg:fixed lg:inset-y-0 lg:z-50 lg:flex lg:w-72 lg:flex-col">
            {% block desktop_sidebar %}
                {{ include('components/sidebar.html.twig', { mobile: false }) }}
            {% endblock %}
        </div>

        <div class="lg:pl-72">
            {% block topbar %}
                {{ include('components/topbar.html.twig') }}
            {% endblock %}

            <main class="py-6">
                <div class="px-4 sm:px-6 lg:px-8">
                    {% block content %}
                    {% endblock %}
                </div>
            </main>
        </div>
    </div>

    <!-- Toast notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>

    <!-- Loading overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-gray-900/50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 shadow-xl">
            <div class="flex items-center space-x-3">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <span class="text-gray-700 font-medium">≈Åadowanie...</span>
            </div>
        </div>
    </div>

    <script>
        // Global dashboard utilities
        window.Dashboard = {
            showToast: function(message, type = 'info') {
                const toast = document.createElement('div');
                const colors = {
                    success: 'bg-green-500',
                    error: 'bg-red-500',
                    warning: 'bg-yellow-500',
                    info: 'bg-blue-500'
                };
                
                toast.className = `${colors[type]} text-white px-6 py-4 rounded-lg shadow-lg transform transition-all duration-300 translate-x-full`;
                toast.innerHTML = `
                    <div class="flex items-center justify-between">
                        <span>${message}</span>
                        <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-white/80 hover:text-white">
                            <svg class="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                            </svg>
                        </button>
                    </div>
                `;
                
                document.getElementById('toast-container').appendChild(toast);
                
                // Animate in
                setTimeout(() => toast.classList.remove('translate-x-full'), 100);
                
                // Auto remove after 5 seconds
                setTimeout(() => {
                    toast.classList.add('translate-x-full');
                    setTimeout(() => toast.remove(), 300);
                }, 5000);
            },
            
            showLoading: function() {
                document.getElementById('loading-overlay').classList.remove('hidden');
            },
            
            hideLoading: function() {
                document.getElementById('loading-overlay').classList.add('hidden');
            },
            
            apiCall: async function(url, options = {}) {
                try {
                    this.showLoading();
                    const response = await fetch(url, {
                        ...options,
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                            ...options.headers
                        }
                    });
                    
                    const data = await response.json();
                    
                    if (!data.success) {
                        throw new Error(data.error || 'API Error');
                    }
                    
                    return data;
                } catch (error) {
                    this.showToast(error.message, 'error');
                    throw error;
                } finally {
                    this.hideLoading();
                }
            }
        };

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            // Setup CSRF token for all AJAX requests
            const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            
            // Auto-refresh dashboard data every 30 seconds
            setInterval(async () => {
                try {
                    const urlParams = new URLSearchParams(window.location.search);
                    const dashboardType = urlParams.get('type') || 'customer';
                    
                    const data = await Dashboard.apiCall(`/dashboard/api/realtime?type=${dashboardType}`);
                    
                    if (data.data.has_updates) {
                        // Update UI with new data
                        document.dispatchEvent(new CustomEvent('dashboard:update', { detail: data.data }));
                    }
                } catch (error) {
                    // Silently fail for auto-refresh
                }
            }, 30000);
        });
    </script>

    <!-- Alpine.js for interactive components -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    
    {% block javascripts %}
    {% endblock %}
</body>
</html>