{% extends "layouts/admin.html.twig" %}

{% block page_title %}Customer Management{% endblock %}
{% block page_heading %}Customer Management{% endblock %}
{% block page_description %}
    <p class="mt-1 text-sm text-gray-500">Manage customer accounts, profiles, and business relationships</p>
{% endblock %}

{% block page_actions %}
<div class="flex items-center space-x-3">
    <!-- Quick Stats -->
    <div class="hidden lg:flex items-center space-x-4 px-4 py-2 bg-gray-50 rounded-lg">
        <div class="text-center">
            <div class="text-sm font-bold text-skywave-600">{{ statistics.active }}</div>
            <div class="text-xs text-gray-500">Active</div>
        </div>
        <div class="text-center">
            <div class="text-sm font-bold text-warning-600">{{ statistics.inactive }}</div>
            <div class="text-xs text-gray-500">Inactive</div>
        </div>
        <div class="text-center">
            <div class="text-sm font-bold text-error-600">{{ statistics.suspended }}</div>
            <div class="text-xs text-gray-500">Suspended</div>
        </div>
    </div>

    <!-- Export Button -->
    <button onclick="exportCustomers()" class="btn btn-secondary text-sm">
        <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        Export
    </button>

    <!-- Create Customer Button -->
    <button onclick="openCreateCustomerModal()" class="btn btn-primary text-sm shadow-md hover:shadow-lg transition-shadow duration-200">
        <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        Add Customer
    </button>
</div>
{% endblock %}

{% block content %}
<div class="space-y-6" x-data="customersManager()">
    <!-- Search and Filters Bar -->
    <div class="bg-white shadow rounded-lg border border-gray-200">
        <div class="p-4 border-b border-gray-200">
            <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
                <!-- Search Input -->
                <div class="flex-1 max-w-lg">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                        <input
                            type="text"
                            x-model="searchQuery"
                            @input.debounce.500ms="searchCustomers()"
                            placeholder="Search customers by name, email, or company..."
                            class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-skywave-500 focus:border-skywave-500"
                        >
                    </div>
                </div>

                <!-- Filter Controls -->
                <div class="flex items-center space-x-3">
                    <!-- Status Filter -->
                    <select x-model="filters.status" @change="applyFilters()" class="form-select text-sm border-gray-300 rounded-md focus:ring-skywave-500 focus:border-skywave-500">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                        <option value="suspended">Suspended</option>
                    </select>

                    <!-- Type Filter -->
                    <select x-model="filters.type" @change="applyFilters()" class="form-select text-sm border-gray-300 rounded-md focus:ring-skywave-500 focus:border-skywave-500">
                        <option value="">All Types</option>
                        <option value="business">Business</option>
                        <option value="individual">Individual</option>
                    </select>

                    <!-- Reset Filters -->
                    <button @click="resetFilters()" class="btn btn-outline text-sm">
                        <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                        </svg>
                        Reset
                    </button>
                </div>
            </div>
        </div>

        <!-- Bulk Actions Bar -->
        <div x-show="selectedCustomers.length > 0" class="px-4 py-3 bg-skywave-50 border-b border-skywave-200">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <span class="text-sm text-skywave-700 font-medium" x-text="`${selectedCustomers.length} customer(s) selected`"></span>
                    <div class="flex items-center space-x-2">
                        <button @click="bulkAction('activate')" class="btn btn-sm btn-success">Activate</button>
                        <button @click="bulkAction('deactivate')" class="btn btn-sm btn-warning">Deactivate</button>
                        <button @click="bulkAction('suspend')" class="btn btn-sm btn-error">Suspend</button>
                    </div>
                </div>
                <button @click="clearSelection()" class="text-skywave-600 hover:text-skywave-800 text-sm font-medium">
                    Clear Selection
                </button>
            </div>
        </div>
    </div>

    <!-- Customer Table -->
    <div class="bg-white shadow rounded-lg border border-gray-200 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="relative px-6 py-3">
                            <input
                                type="checkbox"
                                @change="toggleSelectAll()"
                                :checked="selectedCustomers.length === customers.length && customers.length > 0"
                                class="absolute left-4 top-1/2 -mt-2 h-4 w-4 text-skywave-600 focus:ring-skywave-500 border-gray-300 rounded"
                            >
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" @click="sortBy('company_name')">
                            <div class="flex items-center space-x-1">
                                <span>Company/Name</span>
                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </div>
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contact</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer" @click="sortBy('created_at')">
                            <div class="flex items-center space-x-1">
                                <span>Created</span>
                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
                                </svg>
                            </div>
                        </th>
                        <th scope="col" class="relative px-6 py-3">
                            <span class="sr-only">Actions</span>
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    {% for customer in customers %}
                    <tr class="hover:bg-gray-50 transition-colors duration-150" x-data="{ customerId: {{ customer.id }} }">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <input
                                type="checkbox"
                                :value="customerId"
                                x-model="selectedCustomers"
                                class="h-4 w-4 text-skywave-600 focus:ring-skywave-500 border-gray-300 rounded"
                            >
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center">
                                <div class="flex-shrink-0 h-10 w-10">
                                    <div class="h-10 w-10 rounded-full bg-gradient-to-r from-skywave-400 to-skywave-600 flex items-center justify-center">
                                        <span class="text-sm font-medium text-white">{{ customer.companyName|first|upper }}</span>
                                    </div>
                                </div>
                                <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-900">
                                        <a href="{{ path('admin_customer_show', {id: customer.id}) }}" class="hover:text-skywave-600 transition-colors duration-150">
                                            {{ customer.companyName }}
                                        </a>
                                    </div>
                                    {% if customer.vatNumber %}
                                        <div class="text-sm text-gray-500">VAT: {{ customer.vatNumber }}</div>
                                    {% endif %}
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {{ customer.type == 'business' ? 'bg-skywave-100 text-skywave-800' : 'bg-gray-100 text-gray-800' }}">
                                {% if customer.type == 'business' %}
                                    <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                    </svg>
                                {% else %}
                                    <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                    </svg>
                                {% endif %}
                                {{ customer.type|title }}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <div>{{ customer.email }}</div>
                            {% if customer.phone %}
                                <div class="text-gray-500">{{ customer.phone }}</div>
                            {% endif %}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <div class="flex items-center">
                                <svg class="w-4 h-4 text-gray-400 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                <div>
                                    <div>{{ customer.city }}</div>
                                    {% if customer.country %}
                                        <div class="text-gray-500">{{ customer.country }}</div>
                                    {% endif %}
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="flex items-center space-x-2">
                                {% set statusConfig = {
                                    'active': { color: 'success', icon: 'check-circle', label: 'Active' },
                                    'inactive': { color: 'warning', icon: 'pause-circle', label: 'Inactive' },
                                    'suspended': { color: 'error', icon: 'x-circle', label: 'Suspended' }
                                } %}
                                {% set status = statusConfig[customer.status] ?? statusConfig['inactive'] %}

                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-{{ status.color }}-100 text-{{ status.color }}-800">
                                    <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        {% if status.icon == 'check-circle' %}
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        {% elseif status.icon == 'pause-circle' %}
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        {% else %}
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        {% endif %}
                                    </svg>
                                    {{ status.label }}
                                </span>

                                <!-- Quick Status Toggle -->
                                <div x-data="{ showStatusMenu: false }" class="relative">
                                    <button @click="showStatusMenu = !showStatusMenu" class="text-gray-400 hover:text-gray-600 p-1 rounded">
                                        <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                        </svg>
                                    </button>
                                    <div x-show="showStatusMenu" @click.away="showStatusMenu = false" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10 border border-gray-200">
                                        <div class="py-1">
                                            <button @click="updateCustomerStatus({{ customer.id }}, 'active')" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                <span class="flex items-center">
                                                    <span class="w-2 h-2 bg-success-500 rounded-full mr-2"></span>
                                                    Set Active
                                                </span>
                                            </button>
                                            <button @click="updateCustomerStatus({{ customer.id }}, 'inactive')" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                <span class="flex items-center">
                                                    <span class="w-2 h-2 bg-warning-500 rounded-full mr-2"></span>
                                                    Set Inactive
                                                </span>
                                            </button>
                                            <button @click="updateCustomerStatus({{ customer.id }}, 'suspended')" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                                <span class="flex items-center">
                                                    <span class="w-2 h-2 bg-error-500 rounded-full mr-2"></span>
                                                    Suspend
                                                </span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <div class="flex items-center">
                                <svg class="w-4 h-4 text-gray-400 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3a1 1 0 011-1h6a1 1 0 011 1v4m-6 0h6m-6 0a1 1 0 00-1 1v10a1 1 0 001 1h6a1 1 0 001-1V8a1 1 0 00-1-1H8z" />
                                </svg>
                                {{ customer.createdAt|date('M j, Y') }}
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <div class="flex items-center justify-end space-x-2">
                                <a href="{{ path('admin_customer_show', {id: customer.id}) }}" class="text-skywave-600 hover:text-skywave-900 p-1 rounded-md hover:bg-skywave-50 transition-colors duration-150">
                                    <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                </a>
                                <a href="{{ path('admin_customer_edit', {id: customer.id}) }}" class="text-warning-600 hover:text-warning-900 p-1 rounded-md hover:bg-warning-50 transition-colors duration-150">
                                    <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                    </svg>
                                </a>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="8" class="px-6 py-12 text-center">
                            <div class="flex flex-col items-center justify-center">
                                <svg class="w-12 h-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                </svg>
                                <h3 class="text-lg font-medium text-gray-900 mb-1">No customers found</h3>
                                <p class="text-gray-500 mb-4">Get started by creating your first customer account.</p>
                                <button onclick="openCreateCustomerModal()" class="btn btn-primary">
                                    <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add First Customer
                                </button>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        {% if total_pages > 1 %}
        <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div class="flex-1 flex justify-between sm:hidden">
                {% if current_page > 1 %}
                    <a href="{{ path('admin_customers', filters|merge({page: current_page - 1})) }}" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Previous</a>
                {% endif %}
                {% if current_page < total_pages %}
                    <a href="{{ path('admin_customers', filters|merge({page: current_page + 1})) }}" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">Next</a>
                {% endif %}
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                    <p class="text-sm text-gray-700">
                        Showing <span class="font-medium">{{ (current_page - 1) * 25 + 1 }}</span> to <span class="font-medium">{{ min(current_page * 25, total_customers) }}</span> of <span class="font-medium">{{ total_customers }}</span> results
                    </p>
                </div>
                <div>
                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                        {% if current_page > 1 %}
                            <a href="{{ path('admin_customers', filters|merge({page: current_page - 1})) }}" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                <span class="sr-only">Previous</span>
                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                                </svg>
                            </a>
                        {% endif %}

                        {% for page in 1..total_pages %}
                            {% if page == current_page %}
                                <span class="relative inline-flex items-center px-4 py-2 border border-skywave-500 bg-skywave-50 text-sm font-medium text-skywave-600">{{ page }}</span>
                            {% elseif page == 1 or page == total_pages or (page >= current_page - 2 and page <= current_page + 2) %}
                                <a href="{{ path('admin_customers', filters|merge({page: page})) }}" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">{{ page }}</a>
                            {% elseif page == current_page - 3 or page == current_page + 3 %}
                                <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">...</span>
                            {% endif %}
                        {% endfor %}

                        {% if current_page < total_pages %}
                            <a href="{{ path('admin_customers', filters|merge({page: current_page + 1})) }}" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                <span class="sr-only">Next</span>
                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                            </a>
                        {% endif %}
                    </nav>
                </div>
            </div>
        </div>
        {% endif %}
    </div>

    <!-- Customer Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-skywave-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Total Customers</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ statistics.total|number_format }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-success-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Active Customers</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ statistics.active|number_format }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-warning-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Business Customers</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ statistics.business|number_format }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg border border-gray-200">
            <div class="p-5">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-error-500 rounded-md flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728" />
                            </svg>
                        </div>
                    </div>
                    <div class="ml-5 w-0 flex-1">
                        <dl>
                            <dt class="text-sm font-medium text-gray-500 truncate">Suspended</dt>
                            <dd class="text-lg font-medium text-gray-900">{{ statistics.suspended|number_format }}</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function customersManager() {
    return {
        searchQuery: '{{ filters.search }}',
        customers: [],
        selectedCustomers: [],
        filters: {
            status: '{{ filters.status }}',
            type: '{{ filters.type }}'
        },
        sortField: '',
        sortDirection: 'asc',
        loading: false,

        init() {
            // Initialize with server-side data
            this.customers = @json($customers->toArray() ?? []);
        },

        searchCustomers() {
            this.applyFilters();
        },

        applyFilters() {
            this.loading = true;
            const params = new URLSearchParams({
                search: this.searchQuery,
                status: this.filters.status,
                type: this.filters.type
            });

            // Update URL without reload
            const newUrl = `{{ path('admin_customers') }}?${params.toString()}`;
            window.history.pushState({}, '', newUrl);

            // In a real app, you'd make an AJAX call here
            setTimeout(() => {
                this.loading = false;
                this.showToast('Filters applied', 'success');
            }, 500);
        },

        resetFilters() {
            this.searchQuery = '';
            this.filters = { status: '', type: '' };
            this.selectedCustomers = [];
            window.location.href = '{{ path("admin_customers") }}';
        },

        sortBy(field) {
            if (this.sortField === field) {
                this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                this.sortField = field;
                this.sortDirection = 'asc';
            }
            this.applyFilters();
        },

        toggleSelectAll() {
            if (this.selectedCustomers.length === this.customers.length) {
                this.selectedCustomers = [];
            } else {
                this.selectedCustomers = this.customers.map(c => c.id);
            }
        },

        clearSelection() {
            this.selectedCustomers = [];
        },

        async bulkAction(action) {
            if (this.selectedCustomers.length === 0) {
                this.showToast('Please select customers first', 'warning');
                return;
            }

            if (!confirm(`Are you sure you want to ${action} ${this.selectedCustomers.length} customer(s)?`)) {
                return;
            }

            try {
                const response = await fetch('{{ path("admin_customers_bulk_action") }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        action: action,
                        customer_ids: this.selectedCustomers
                    })
                });

                const result = await response.json();

                if (result.success) {
                    this.showToast(result.message, 'success');
                    this.selectedCustomers = [];
                    // Refresh the page or update the UI
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    this.showToast(result.error || 'Operation failed', 'error');
                }
            } catch (error) {
                this.showToast('Network error occurred', 'error');
                console.error('Bulk action error:', error);
            }
        },

        async updateCustomerStatus(customerId, status) {
            try {
                const response = await fetch(`/admin/customers/${customerId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({ status: status })
                });

                const result = await response.json();

                if (result.success) {
                    this.showToast(result.message, 'success');
                    // Refresh the page or update the customer in the UI
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    this.showToast(result.error || 'Failed to update status', 'error');
                }
            } catch (error) {
                this.showToast('Network error occurred', 'error');
                console.error('Status update error:', error);
            }
        },

        showToast(message, type = 'info') {
            // Create toast notification
            const toast = document.createElement('div');
            toast.className = `fixed top-4 right-4 z-50 max-w-sm bg-white shadow-lg rounded-lg border-l-4 border-${type === 'success' ? 'success' : type === 'error' ? 'error' : type === 'warning' ? 'warning' : 'skywave'}-500 p-4 transform transition-all duration-300 translate-x-full`;

            toast.innerHTML = `
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        ${this.getToastIcon(type)}
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">${message}</p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button onclick="this.parentElement.parentElement.parentElement.remove()" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
            `;

            document.body.appendChild(toast);

            // Slide in
            setTimeout(() => {
                toast.classList.remove('translate-x-full');
            }, 100);

            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => toast.remove(), 300);
            }, 5000);
        },

        getToastIcon(type) {
            const icons = {
                success: '<svg class="w-5 h-5 text-success-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>',
                error: '<svg class="w-5 h-5 text-error-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>',
                warning: '<svg class="w-5 h-5 text-warning-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.07 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg>',
                info: '<svg class="w-5 h-5 text-skywave-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>'
            };
            return icons[type] || icons.info;
        }
    }
}

// Export functionality
function exportCustomers() {
    const params = new URLSearchParams(window.location.search);
    params.set('format', 'csv');
    window.open(`{{ path('admin_customers_export') }}?${params.toString()}`, '_blank');
}

// Create customer modal (placeholder)
function openCreateCustomerModal() {
    alert('Create Customer Modal - This would open a modal or redirect to create page');
    // In real implementation, this would open a modal or redirect to create page
}
</script>
{% endblock %}